// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SpaceSpaceType string

const (
	SpaceSpaceTypePersonal SpaceSpaceType = "personal"
	SpaceSpaceTypeTeam     SpaceSpaceType = "team"
)

func (e SpaceSpaceType) ToPointer() *SpaceSpaceType {
	return &e
}

func (e *SpaceSpaceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "personal":
		fallthrough
	case "team":
		*e = SpaceSpaceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SpaceSpaceType: %v", v)
	}
}

type Space struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	RootFolderID string         `json:"rootFolderId"`
	SpaceType    SpaceSpaceType `json:"spaceType"`
}

func (o *Space) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Space) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Space) GetRootFolderID() string {
	if o == nil {
		return ""
	}
	return o.RootFolderID
}

func (o *Space) GetSpaceType() SpaceSpaceType {
	if o == nil {
		return SpaceSpaceType("")
	}
	return o.SpaceType
}
